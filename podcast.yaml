AWSTemplateFormatVersion: '2010-09-09'
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: UserID
          AttributeType: S
      KeySchema:
        - AttributeName: UserID
          KeyType: HASH  # Partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LoginRegisterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LoginRegisterLambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: applicationbackendfrontend
        S3Key: loginregister.zip

  LoginRegisterLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  PodCastApp:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PodCastApp
      Description: API for the PodCastApp

  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PodCastApp
      ParentId: !GetAtt PodCastApp.RootResourceId
      PathPart: users

  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginRegisterLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  UsersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref UsersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"  # Specify a valid model or use "Empty" for a mock integration
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "{}"  # Use an empty JSON object or a valid response template
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  LambdaPermissionForAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LoginRegisterLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PodCastApp}/*/POST/users"

  PodcastStore2Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: podcaststore2
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt PodcastTranscriptionLambda.Arn
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["PUT", "POST", "DELETE", "GET"]
            AllowedOrigins: ["*"]
            ExposedHeaders: []
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PodcastUploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt PodcastUploadLambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: applicationbackendfrontend
        S3Key: podcastupload.zip

  PodcastUploadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        

  # API Gateway Integration
  PodcastUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PodCastApp # Reference to your existing API Gateway
      ParentId: !GetAtt PodCastApp.RootResourceId # Assuming you want to add this as a top-level resource
      PathPart: podcastupload # The path part for the new resource

  PodcastUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref PodcastUploadResource
      HttpMethod: POST # or any other method you prefer
      AuthorizationType: NONE # or configure as needed
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PodcastUploadLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  PodcastUploadOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref PodcastUploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "{}"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  LambdaPermissionForPodcastUpload:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PodcastUploadLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PodCastApp}/*/POST/podcastupload"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UsersPostMethod
      - UsersOptionsMethod
      - PodcastUploadMethod
      - PodcastUploadOptionsMethod
      - ShowGetMethod
      - ShowOptionsMethod
      - ContactUsMethod
      - ContactUsOptionsMethod
    Properties:
      RestApiId: !Ref PodCastApp
      StageName: prod



  ScriptStore2Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: scriptstore2
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["PUT", "POST", "DELETE", "GET"]
            AllowedOrigins: ["*"]
            ExposedHeaders: []
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PodcastTranscriptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt PodcastTranscriptionLambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: applicationbackendfrontend
        S3Key: podcasttranscription.zip

  PodcastTranscriptionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PodcastTranscriptionLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::podcaststore2"

  ShowLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ShowLambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: applicationbackendfrontend
        S3Key: showlambda.zip

  ShowLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ShowResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PodCastApp
      ParentId: !GetAtt PodCastApp.RootResourceId
      PathPart: show

  ShowGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref ShowResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  ShowOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref ShowResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "{}"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  LambdaPermissionForShow:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ShowLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PodCastApp}/*/GET/show"

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: My SNS Topic

  MySNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: jy834177@dal.ca
      TopicArn: !Ref MySNSTopic

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: contactus1
      Handler: index.handler
      Role: !GetAtt ContactUsLambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: applicationbackendfrontend
        S3Key: contactus.zip
      Environment:
        Variables:
          TOPIC_ARN: !Ref MySNSTopic

  ContactUsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ContactUsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  ContactUsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PodCastApp # Reference to your existing API Gateway
      ParentId: !GetAtt PodCastApp.RootResourceId # Assuming you want to add this as a top-level resource
      PathPart: contactus # The path part for the new resource

  ContactUsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref ContactUsResource
      HttpMethod: POST
      AuthorizationType: NONE # or configure as needed
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  ContactUsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PodCastApp
      ResourceId: !Ref ContactUsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "{}"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  LambdaPermissionForContactUs:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PodCastApp}/*/POST/contactus"

  SecurityGroupWeb:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security Group for web access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  SecurityGroupSSH:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security Group for SSH access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  SecurityGroupCustom:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Custom Security Group for application-specific access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: "0.0.0.0/0"
  MyKeyPair:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: "my-cloudformation-keypair"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-0230bd60aa48260c6
      InstanceType: t2.small  
      KeyName: !Ref MyKeyPair
      SecurityGroupIds:
        - !Ref SecurityGroupWeb
        - !Ref SecurityGroupSSH
        - !Ref SecurityGroupCustom
      Tags: 
        - Key: Name
          Value: CloudComputingTermAssignment
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          yum install git -y
          git clone  https://github.com/jay-241/Podcast.git
          cd Podcast/
          rm .env
          echo "REACT_APP_API=\"https://${PodCastApp}.execute-api.${AWS::Region}.amazonaws.com/prod\"" > .env
          yum install nodejs -y
          yum install npm -y
          npm install
          npm run build
          npm run start&

Outputs:
  TopicArn:
    Description: "ARN of the SNS Topic"
    Value: !Ref MySNSTopic
  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref MyLambdaFunction